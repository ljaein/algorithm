package study0604;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main_1486_등산 {

	static int N,M,T,D;
	static int[][] map,time;
	static int[] dy = {0,1,0,-1};
	static int[] dx = {1,0,-1,0};
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N=Integer.parseInt(st.nextToken());
		M=Integer.parseInt(st.nextToken());
		T=Integer.parseInt(st.nextToken());
		D=Integer.parseInt(st.nextToken());
		map = new int[N][M];
		time = new int[N][M];
		for (int i = 0; i < N; i++) {
			char[] c =br.readLine().toCharArray();
			for (int j = 0; j < M; j++) {
				if(c[j]-'A' < 26){
					map[i][j] = c[j]-'A';
				}else{
					map[i][j] = c[j]-'a'+26;
				}
			}
		}
		bfs();
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				System.out.print(time[i][j]+" ");
			}
			System.out.println();
		}
		
		
	}
	static void bfs(){
		PriorityQueue<Point> pq = new PriorityQueue<>();
		boolean[][] visit = new boolean[N][M];
		visit[0][0]=true;
		pq.add(new Point(0,0,0));
		while(!pq.isEmpty()){
			Point cur = pq.poll();
			for(int d=0;d<4;d++){
				int ny = cur.y+dy[d];
				int nx = cur.x+dx[d];
				if(ny<0||nx<0||ny>=N||nx>=M||visit[ny][nx])
					continue;
				if(Math.abs(map[cur.y][cur.x]-map[ny][nx])>T)
					continue;
				if(map[cur.y][cur.x]>=map[ny][nx]){
					time[ny][nx]=time[cur.y][cur.x]+1;
					visit[ny][nx]=true;
				}else{
					int pow = (int)Math.pow(map[ny][nx]-map[cur.y][cur.x], 2);
					time[ny][nx] = Math.min(time[ny][nx],time[cur.y][cur.x] + pow);
					visit[ny][nx]=true;
				}
				pq.add(new Point(ny,nx,time[ny][nx]));
			}
		}
	}
	
	static void print(){
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				System.out.print(map[i][j]+" ");
			}
			System.out.println();
		}
	}
	
	static class Point implements Comparable<Point>{
		int y, x, t;

		public Point(int y, int x, int t) {
			super();
			this.y = y;
			this.x = x;
			this.t = t;
		}

		@Override
		public int compareTo(Point o) {
			return this.t-o.t;
		}

		
		
	}

}
