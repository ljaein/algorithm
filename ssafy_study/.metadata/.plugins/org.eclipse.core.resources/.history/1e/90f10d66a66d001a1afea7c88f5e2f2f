package todo;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
 
public class test {
    static class Node{
        int r,c,cnt,t_cnt;
        Node(int r,int c,int cnt, int t_cnt){
            this.r = r;
            this.c = c;
            this.cnt = cnt;
            this.t_cnt = t_cnt;
        }
    }
    static int[][] map;
    static int N, S;
    static int[] dr = {-1, 1, 0, 0};
    static int[] dc = {0, 0, -1, 1};
    static int fr,fc    ;
    static int str,stc;
     
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int tc = 1; tc <= T; tc++) {
            N = sc.nextInt();
            S = sc.nextInt();
            Queue<Node> queue = new LinkedList<>();
            map = new int[N][N];
            for(int i = 0; i < N; i++) {
                String input = sc.next();
                for(int j = 0; j < N; j++) {
                    char c = input.charAt(j);
                    switch (c) {
                    case 'T':
                        map[i][j] = -1;
                        break;
                    case 'H':
                        map[i][j] = 1;
                        queue.add(new Node(i, j, 1, 0));
                        break;
                    case 'M':
                        str = i; 
                        stc = j;
                        break;
                    case 'D':
                        map[i][j] = -1;
                        fr = i; 
                        fc = j;
                        break;
                    }
                }
            }
            while(!queue.isEmpty()) {
                Node node = queue.poll();
                for(int i = 0; i < 4; i++) {
                    int nr = node.r + dr[i];
                    int nc = node.c + dc[i];
                    int cnt = node.cnt +1;
                    if( nr < 0 || nc < 0 || nr >= N || nc >= N)
                        continue;
                    if( map[nr][nc] != 0)
                        continue;
                    map[nr][nc] = cnt;
                    queue.add(new Node(nr, nc, cnt, 0));
                }
            }
            for(int i=0;i<N;i++){
            	for(int j=0;j<N;j++){
            		System.out.print(map[i][j]+" ");
            	}
            	System.out.println();
            }
            int l = 0;
            int r = N * N;
            while( l <= r ) {
                int mid = (l + r) / 2;
                if( !isOk(mid) ) 
                    r = mid-1;
                else {
                    l = mid+1;
                }
            }
            System.out.println("#" + tc + " " + r);
        }
    }
    static boolean isOk(int day) {
        day++;
        if( map[str][stc] <= day)
            return false;
        boolean[][] visited = new boolean[N][N];
        Queue<Node> queue = new LinkedList<>();
        queue.add(new Node(str, stc, 0, day));
        visited[str][stc] = true;
        while(!queue.isEmpty()) {
            Node node = queue.poll();
            for(int i = 0; i < 4; i++) {
                int nr = node.r + dr[i];
                int nc = node.c + dc[i];
                int cnt = node.cnt + 1 == S ? 0 : node.cnt + 1;
                int t_cnt = node.cnt + 1 == S ? node.t_cnt + 1 : node.t_cnt;
                if( nr < 0 || nc < 0 || nr >= N || nc >= N)
                    continue;
                if( nr == fr && nc == fc) {
                    return true;
                }
                if( map[nr][nc] == -1 )
                    continue;
                if( visited[nr][nc] )
                    continue;
                if( map[nr][nc] <= t_cnt )
                    continue;
                visited[nr][nc] = true;
                queue.add(new Node(nr, nc, cnt, t_cnt));
            }
        }
        return false;
    }
}