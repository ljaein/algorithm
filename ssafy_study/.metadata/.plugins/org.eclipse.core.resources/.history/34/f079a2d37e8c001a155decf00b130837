package study0404;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main_1726_로봇 {

	static int M, N;
	static int[][] map;
	static int sy, sx, sd, ey, ex, ed;
	static boolean[][] visit;
	static int[] dy = { 0, 0, 1, -1 };
	static int[] dx = { 1, -1, 0, 0 };

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		M = sc.nextInt();
		N = sc.nextInt();
		map = new int[M][N];
		visit = new boolean[M][N];
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				map[i][j] = sc.nextInt();
			}
		}
		sy = sc.nextInt() - 1;
		sx = sc.nextInt() - 1;
		sd = sc.nextInt() - 1;
		ey = sc.nextInt() - 1;
		ex = sc.nextInt() - 1;
		ed = sc.nextInt() - 1;
		bfs();
	}

	static void bfs() {
		Queue<Point> q = new LinkedList<>();
		visit[sy][sx] = true;
		q.add(new Point(sy, sx, sd, 0));
		while (!q.isEmpty()) {
			Point cur = q.poll();
			if (cur.y == ey && cur.x == ex) {
				goPrev(cur);
				System.out.println(cur.cnt);
				return;
			}
			for (int d = 0; d < 4; d++) {
				for (int i = 1; i <= 3; i++) {
					int ncnt = cur.cnt;
					int ny = cur.y;
					int nx = cur.x;
					for (int j = 0; j < i; j++) {
						ny += dy[d];
						nx += dx[d];
						if (ny < 0 || nx < 0 || ny >= M || nx >= N || visit[ny][nx] || map[ny][nx] == 1)
							continue;
						visit[ny][nx] = true;
					}
					if (cur.d != d) {
						if (cur.d == 0) {
							if (d == 1)
								ncnt += 2;
							else
								ncnt += 1;
						} else if (cur.d == 1) {
							if (d == 0)
								ncnt += 2;
							else
								ncnt += 1;
						} else if (cur.d == 2) {
							if (d == 3)
								ncnt += 2;
							else
								ncnt += 1;
						} else {
							if (d == 2)
								ncnt += 2;
							else
								ncnt += 1;
						}
					}

					ncnt++;
					Point p = new Point(ny, nx, d, ncnt);
					p.prev = cur;
					q.add(p);
				}

			}
		}
	}

	static void goPrev(Point ver) {
		while (ver != null) {
			System.out.println(ver);
			ver = ver.prev;
		}
	}

	static class Point {
		int y, x, d, cnt;
		Point prev;

		public Point(int y, int x, int d, int cnt) {
			super();
			this.y = y;
			this.x = x;
			this.d = d;
			this.cnt = cnt;
		}

		@Override
		public String toString() {
			return "Point [y=" + y + ", x=" + x + ", d=" + d + ", cnt=" + cnt + ", prev=" + prev + "]";
		}

	}

}
