package study0203;

import java.util.Comparator;
import java.util.LinkedList;
import java.util.Scanner;

public class Main_17135_캐슬디펜스 {

	static int N, M, D;
	static int[][] map;
	static int[] gung;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		M = sc.nextInt();
		D = sc.nextInt();
		map = new int[N][M];
		gung = new int[M];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				map[i][j] = sc.nextInt();
			}
		}
		combi(0, 0);

	}

	public static void combi(int start, int cnt) {
		if (cnt == 3) {
			attack(gung);
			return;
		}
		for (int i = start; i < M; i++) {
			gung[cnt] = i;
			combi(i + 1, cnt + 1);
		}
	}

	public static void attack(int[] gung) {
		for (int g = 0; g < 3; g++) {
			LinkedList<Point> list = new LinkedList<>();
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {

					if (map[i][j] == 1) {
						int dis = Math.abs(N - i) + Math.abs(gung[g] - j);
						list.add(new Point(i, j, dis));
					}
				}
			}
			// 가장 가까운 적 고르기 (왼쪽부터 들어가있음)
			list.sort();
		}
	}

	public static class C implements Comparator<Point> {

		@Override
		public int compare(Point arg0, Point arg1) {
			if (arg0.d > arg1.d)
				return 1;
			else
				return -1;
		}

	}

	static class Point {
		int y, x, d;

		public Point(int y, int x, int d) {
			this.y = y;
			this.x = x;
			this.d = d;
		}
	}

}
