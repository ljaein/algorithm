package study0301;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
 
public class sss {
     
    static int N;
    static int[][] map;
    static int[] dessert;
    static int max;
     
    static int[] di = {1,1,-1,-1};
    static int[] dj = {1,-1,-1,1};
    static int si, sj;
     
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine());
         
        for(int test_case = 1; test_case <= T; test_case++) {
            N = Integer.parseInt(br.readLine());
            map = new int[N][N];
             
            StringTokenizer st;
            for(int i = 0; i < N; i++) {
                st = new StringTokenizer(br.readLine());
                for(int j = 0; j < N; j++) {
                    map[i][j] = Integer.parseInt(st.nextToken());
                }
            }
             
            dessert = new int[101];
            max = Integer.MIN_VALUE;
             
            for(int i = 0; i < N-2; i++) {
                for(int j = 1; j < N-1; j++) {
                    si = i;
                    sj = j;
                    dfs(i, j, 0, 0);
                }
            }
             
            if(max == Integer.MIN_VALUE) {
                max = -1;
            }
            System.out.println("#" + test_case + " " + max);
        }
        br.close();
    }
     
    static void dfs(int i, int j, int d, int depth) {       
        int ni, nj;
        if(d == 0) {
            ni = i + 1;
            nj = j + 1;
            if(check(ni, nj) && dessert[map[ni][nj]] == 0) {
                dessert[map[ni][nj]] = 1;
                dfs(ni, nj, 0, depth + 1);
                dessert[map[ni][nj]] = 0;
            }
             
            ni = i + 1;
            nj = j - 1;
            if(check(ni, nj) && dessert[map[ni][nj]] == 0) {
                dessert[map[ni][nj]] = 1;
                dfs(ni, nj, 1, depth + 1);
                dessert[map[ni][nj]] = 0;
            }
        }
        else if(d == 1) {
            ni = i + 1;
            nj = j - 1;
            if(check(ni, nj) && dessert[map[ni][nj]] == 0) {
                dessert[map[ni][nj]] = 1;
                dfs(ni, nj, 1, depth + 1);
                dessert[map[ni][nj]] = 0;
            }
             
            ni = i - 1;
            nj = j - 1;
            if(check(ni, nj) && dessert[map[ni][nj]] == 0) {
                dessert[map[ni][nj]] = 1;
                dfs(ni, nj, 2, depth + 1);
                dessert[map[ni][nj]] = 0;
            }
        }
        else if(d == 2) {
            ni = i - 1;
            nj = j - 1;
            if(check(ni, nj) && dessert[map[ni][nj]] == 0) {
                dessert[map[ni][nj]] = 1;
                dfs(ni, nj, 2, depth + 1);
                dessert[map[ni][nj]] = 0;
            }
             
            ni = i - 1;
            nj = j + 1;
            if(check(ni, nj) && dessert[map[ni][nj]] == 0) {
                dessert[map[ni][nj]] = 1;
                dfs(ni, nj, 3, depth + 1);
                dessert[map[ni][nj]] = 0;
            }
        }
        else {
            if(i == si && j == sj) {
                if(depth > max) {
                    max = depth;
                }
            }
            else if(i == si || j == sj) {
                return;
            }
             
            ni = i - 1;
            nj = j + 1;
            if(check(ni, nj) && dessert[map[ni][nj]] == 0) {
                dessert[map[ni][nj]] = 1;
                dfs(ni, nj, 3, depth + 1);
                dessert[map[ni][nj]] = 0;
            }
        }
    }
     
    static boolean check(int i, int j) {
        if(i > -1 && i < N && j > -1 && j < N) {
            return true;
        }
        return false;
    }
}