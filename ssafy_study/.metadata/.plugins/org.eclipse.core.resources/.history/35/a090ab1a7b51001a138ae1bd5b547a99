package study0203;

import java.util.Arrays;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Scanner;

public class Main_17135_캐슬디펜스 {

	static int N, M, D, res, max;
	static int[][] fix_map, map;
	//static int[] gung;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		M = sc.nextInt();
		D = sc.nextInt();
		fix_map = new int[N][M];
		map = new int[N][M];
		//gung = new int[3];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				map[i][j] = sc.nextInt();//바꿔
			}
		}
		//combi(0, 0);
		int[] gung = {0,1,2};
		while (!check()) {
			attack(gung);
			System.out.println("in");
			move();
		}
		System.out.println(res);
		//System.out.println(max);
	}

	public static void combi(int start, int cnt) {
		if (cnt == 3) {
			for (int i = 0; i < N; i++)
				System.arraycopy(fix_map[i], 0, map[i], 0, M);
			while (!check()) {
				//attack(gung);
				move();
			}
			max = Math.max(max, res);
			res = 0;
			return;
		}
		for (int i = start; i < M; i++) {
			//gung[cnt] = i;
			combi(i + 1, cnt + 1);
		}
	}

	public static void attack(int[] gung) {
		for (int g = 0; g < 3; g++) {
			LinkedList<Point> list = new LinkedList<>();
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					if (map[i][j] == 1) {
						int dis = Math.abs(N - i) + Math.abs(gung[g] - j);
						if (dis <= D){
							
						System.out.println("add"+i+" "+j);
							list.add(new Point(i, j, dis));
					}}
				}
			}
			// 가장 가까운 적 고르기 (왼쪽부터 들어가있음)
			if (list.size() != 0) {
				list.sort(new C());
				map[list.get(0).y][list.get(0).x] = 0;
				res++;
			}
		}
	}

	public static void move() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (map[i][j] == 1) {
					map[i][j] = 0;
					if (i + 1 < N)
						map[i + 1][j] = 1;
				}
			}
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				System.out.print(map[i][j]+" ");
			}
			System.out.println();
		}
	}

	public static boolean check() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (map[i][j] == 1) {
					return false;
				}
			}
		}
		return true;
	}

	public static class C implements Comparator<Point> {

		@Override
		public int compare(Point arg0, Point arg1) {
			if (arg0.d > arg1.d)
				return 1;
			else if(arg0.d==arg1.d){
				if(arg0.x>arg1.x)
					return 1;
				else
					return -1;
			}
			else
				return -1;
		}

	}

	static class Point {
		int y, x, d;

		public Point(int y, int x, int d) {
			this.y = y;
			this.x = x;
			this.d = d;
		}
	}

}
