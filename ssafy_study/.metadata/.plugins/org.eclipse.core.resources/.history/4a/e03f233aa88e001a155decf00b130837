package study0501;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

public class Main_6118_숨바꼭질 {

	static int N, M;
	static int[][] map;
	static boolean[][] visit;
	static PriorityQueue<Home> pq = new PriorityQueue<>();

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		M = sc.nextInt();
		map = new int[N][N];
		visit = new boolean[N][N];
		for (int i = 0; i < M; i++) {
			int A_i = sc.nextInt() - 1;
			int B_i = sc.nextInt() - 1;
			map[A_i][B_i] = 1;
			map[B_i][A_i] = 1;
		}
		bfs();
		Home ans = pq.poll();
		System.out.print((ans.h+1)+" "+ans.d+" ");
		int cnt = 0;
		while (true) {
			Home h = pq.poll();
			if(ans.d==h.d)
				cnt++;
			else
				break;
		}
		System.out.println(cnt);
	}

	static void bfs() {
		Queue<Home> q = new LinkedList<>();
		boolean visit[] = new boolean[N];
		visit[0] = true;
		q.add(new Home(0, 0));
		while (!q.isEmpty()) {
			Home cur = q.poll();
			for (int j = 0; j < N; j++) {
				if (!visit[j] && map[cur.h][j] == 1) {
					visit[j] = true;
					q.add(new Home(j, cur.d + 1));
					pq.add(new Home(j, cur.d + 1));
				}
			}
		}
	}

	static class Home implements Comparable<Home> {
		int h, d;

		public Home(int h, int d) {
			super();
			this.h = h;
			this.d = d;
		}

		@Override
		public String toString() {
			return "Home [h=" + h + ", d=" + d + "]";
		}

		@Override
		public int compareTo(Home o) {
			if (this.d > o.d)
				return -1;
			else if (this.d < o.d)
				return 1;
			else {
				if (this.h < o.h)
					return -1;
				else
					return 1;
			}
		}

	}
}
