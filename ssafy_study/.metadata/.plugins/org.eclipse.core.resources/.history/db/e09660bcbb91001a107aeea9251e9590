package kakao;

import java.util.LinkedList;

public class Solution2 {

	public static void main(String[] args) {
		String expression = "100-200*300-500+20";
		System.out.println(solution(expression));

	}

	public static long solution(String expression) {
		long answer = 0;
		char[][] oper = { { '+', '-', '*' }, { '+', '*', '-' }, { '-', '+', '*' }, { '-', '*', '+' }, { '*', '+', '-' },
				{ '*', '-', '+' } };
		LinkedList<Integer> f_nlist = new LinkedList<>();
		LinkedList<Character> f_olist = new LinkedList<>();

		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < expression.length(); i++) {
			if (expression.charAt(i) == '-' || expression.charAt(i) == '+' || expression.charAt(i) == '*') {
				f_nlist.add(Integer.parseInt(sb.toString()));
				sb = new StringBuffer();
				f_olist.add(expression.charAt(i));
			} else {
				sb.append(expression.charAt(i));
			}
		}
		f_nlist.add(Integer.parseInt(sb.toString()));
		LinkedList<Integer> nlist = new LinkedList<>();
		LinkedList<Character> olist = new LinkedList<>();
//		for (int i = 0; i < 6; i++) {
		int i=1;
			nlist = (LinkedList<Integer>)f_nlist.clone();
			olist = (LinkedList<Character>)f_olist.clone();
			for (int j = 0; j < 3; j++) {
				for (int k = 0; k < olist.size(); k++) {
					if (olist.get(k) == oper[i][j]) {
						int a = nlist.get(k);
						int b = nlist.get(k + 1);
						nlist.remove(k);
						nlist.remove(k);
						if (oper[i][j] == '*') {
							nlist.add(k, a * b);
						} else if (oper[i][j] == '+') {
							nlist.add(k, a + b);
						} else {
							nlist.add(k, a - b);
						}
						olist.remove(k);
						System.out.println(nlist.toString());
						System.out.println(olist.toString());
					}
				}
			}
//		}
		return answer;
	}

}
