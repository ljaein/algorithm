package study0204;

import java.util.Scanner;

public class Main_17472_다리만들기2 {

	static int N, M, num;
	static int[][] map, link;
	static boolean[][] visited;
	static int[] dy = { -1, 0, 1, 0 };
	static int[] dx = { 0, 1, 0, -1 };

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		M = sc.nextInt();
		map = new int[N][M];
		visited = new boolean[N][M];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				map[i][j] = sc.nextInt();
			}
		}

		num = 0;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (map[i][j] == 1 && !visited[i][j]) {
					visited[i][j] = true;
					num++;
					map[i][j] = num;
					sumNum(i, j, num);
				}
			}
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				System.out.print(map[i][j] + " ");
			}
			System.out.println();
		}
		
		link = new int[num+1][num+1];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(map[i][j]!=0){
					System.out.println(i+" "+j);
					visited = new boolean[N][M];
					bridge(i,j,map[i][j],0);
				}
			}
		}
		for (int i = 0; i < num+1; i++) {
			for (int j = 0; j < num+1; j++) {
				System.out.print(link[i][j] + " ");
			}
			System.out.println();
		}

	}

	public static void bridge(int y, int x, int s, int l){
		for (int d = 0; d < 4; d++) {
			int ny = y + dy[d];
			int nx = x + dx[d];
			if (ny < 0 || nx < 0 || ny >= N || nx >= M || visited[ny][nx] || map[ny][nx]==s) {
				continue;
			}
			if (map[ny][nx] == 0 ) {
				visited[ny][nx] = true;
				bridge(ny,nx,s,l+1);
			}else{
				link[s][map[ny][nx]]=Math.min(link[s][map[ny][nx]], l);
			}
		}
	}
	public static void sumNum(int y, int x, int n) {
		for (int d = 0; d < 4; d++) {
			int ny = y + dy[d];
			int nx = x + dx[d];
			if (ny < 0 || nx < 0 || ny >= N || nx >= M || visited[ny][nx]) {
				continue;
			}
			if (map[ny][nx] == 1) {
				visited[ny][nx] = true;
				map[ny][nx] = n;
				sumNum(ny, nx, n);
			}
		}
	}

}
