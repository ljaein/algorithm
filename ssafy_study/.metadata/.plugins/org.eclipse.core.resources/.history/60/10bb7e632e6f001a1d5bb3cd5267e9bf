package study0304;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main_1194_달이차오른다가자 {

	static int N, M, key;
	static char[][] map;
	static boolean[][][] visited;
	static int[] dy = { -1, 0, 1, 0 };
	static int[] dx = { 0, 1, 0, -1 };
	static Queue<Point> q = new LinkedList<>();

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		M = sc.nextInt();
		map = new char[N][M];
		visited = new boolean[N][M][6];
		for (int i = 0; i < N; i++) {
			map[i] = sc.next().toCharArray();
			for (int j = 0; j < M; j++) {
				if (map[i][j] == 0) {
					q.add(new Point(i, j, 0));
					visited[i][j][0] = true;
				}

			}
		}
		bfs();
	}

	static void bfs() {
		while (!q.isEmpty()) {
			Point cur = q.poll();
			for (int d = 0; d < 4; d++) {
				int ny = cur.y + dy[d];
				int nx = cur.x + dx[d];
				if (ny < 0 || nx < 0 || ny >= N || nx >= M || visited[ny][nx][key] || map[ny][nx] == '#')
					continue;
				if (map[ny][nx] >= 'a' && map[ny][nx] <= 'f') {
					key = key | (1 << (map[ny][nx] - 'a'));
					q.add(new Point(ny, nx, cur.cnt + 1));
				} else if (map[ny][nx] >= 'A' && map[ny][nx] <= 'F') {
					if ((key & (1 << (map[ny][nx] - 'A'))) != 0) {
						q.add(new Point(ny, nx, cur.cnt + 1));
					}
				}
			}
		}
	}

	static class Point {
		int y, x, cnt;

		public Point(int y, int x, int cnt) {
			super();
			this.y = y;
			this.x = x;
			this.cnt = cnt;
		}

	}

}
