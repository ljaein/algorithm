package study1003;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;

public class Solution_D4_10888_음식배달 {
	static int T, N;
	static int[][] map;
	static List<Point> home = new LinkedList<>();
	static List<Point> food = new LinkedList<>();
	static boolean[] visit;

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		T = Integer.parseInt(br.readLine());
		for (int t = 1; t <= T; t++) {
			N = Integer.parseInt(br.readLine());
			map = new int[N][N];
			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
					if (map[i][j] >= 2)
						food.add(new Point(i, j));
					else if (map[i][j] == 1)
						home.add(new Point(i, j));
				}
			}
			// for (int i = 0; i < N; i++) {
			// for (int j = 0; j < N; j++) {
			// System.out.print(map[i][j]+" ");
			// }
			// System.out.println();
			// }
			for (int i = 1; i <= food.size(); i++) {
				visit = new boolean[food.size()];
				Point[] sel = new Point[i];
				perm(0, i, sel);
			}

		}
	}

	static void perm(int cnt, int K, Point[] sel) {
		if (cnt == K) {
			System.out.println(Arrays.toString(sel));
			return;
		}
		for (int i = 0; i < food.size(); i++) {
			if(!visit[i]){
				visit[i] = true;
				sel[cnt] = food.get(i);
				perm(cnt+1, K, sel);
				visit[cnt] =false;
			}
		}
	}

	static class Point {
		int y, x;

		public Point(int y, int x) {
			super();
			this.y = y;
			this.x = x;
		}

	}
}
